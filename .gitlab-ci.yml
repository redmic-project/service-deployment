stages:
  - deploy

image: registry.gitlab.com/redmic-project/docker/docker-deploy

services:
  - docker:dind

variables:
  DOCKER_DRIVER: overlay2
  STATUS_CHECK_DELAY: 60

deploy-artifactory-dev:
  stage: deploy
  variables:
    DEPLOY_DIR_NAME: artifactory
    SSH_REMOTE: ${DEV_SSH_REMOTE}
    STACK: artifactory
    SERVICES_TO_CHECK: artifactory_artifactory
    IMAGE_TAG: latest
    COMPOSE_FILE: docker-compose.tmpl.yml:docker-compose.dev.yml
  script:
    - >
      deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE} PUBLIC_HOSTNAME=${DEV_PUBLIC_HOSTNAME}
  environment:
    name: dev/artifactory
    url: https://artifactory.${DEV_PUBLIC_HOSTNAME}
  only:
    - dev
  when: manual

deploy-gitlab-ce-dev:
  stage: deploy
  variables:
    DEPLOY_DIR_NAME: gitlab-ce
    SSH_REMOTE: ${DEV_SSH_REMOTE}
    STACK: gitlab
    SERVICES_TO_CHECK: gitlab_gitlab-ce
    STATUS_CHECK_DELAY: 300
    AUTHORIZED_KEYS_PROXY: ${GITLAB_AUTHORIZED_KEYS_PROXY}
    IMAGE_TAG: latest
    COMPOSE_FILE: docker-compose.tmpl.yml:docker-compose.dev.yml
    AWS_REGION: ${OAGDEV_GITLAB_AWS_REGION}
    AWS_ACCESS_KEY_ID: ${OAGDEV_GITLAB_AWS_ACCESS_KEY}
    AWS_SECRET_ACCESS_KEY: ${OAGDEV_GITLAB_AWS_SECRET_KEY}
    SMTP_ADDR: ${OAGDEV_GITLAB_SMTP_ADDR}
    SMTP_USER: ${OAGDEV_GITLAB_SMTP_USER}
    SMTP_PASS: ${OAGDEV_GITLAB_SMTP_PASS}
    SMTP_DOMAIN: ${OAGDEV_GITLAB_SMTP_DOMAIN}
  script:
    - echo "${AUTHORIZED_KEYS_PROXY}" > "${DEPLOY_DIR_NAME}/authorized_keys_proxy"
    - >
      deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE} AWS_REGION=${AWS_REGION}
      AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} SMTP_ADDR=${SMTP_ADDR}
      SMTP_USER=${SMTP_USER} SMTP_PASS=${SMTP_PASS} SMTP_DOMAIN=${SMTP_DOMAIN} PUBLIC_HOSTNAME=${DEV_PUBLIC_HOSTNAME}
  environment:
    name: dev/gitlab-ce
    url: https://git.${DEV_PUBLIC_HOSTNAME}
  only:
    - dev
  when: manual

deploy-gitlab-runner-dev:
  stage: deploy
  variables:
    DEPLOY_DIR_NAME: gitlab-runner
    SSH_REMOTE: ${DEV_SSH_REMOTE}
    STACK: gitlab
    SERVICES_TO_CHECK: gitlab_gitlab-runner
    IMAGE_TAG: alpine
    COMPOSE_FILE: docker-compose.tmpl.yml:docker-compose.dev.yml
    CI_SERVER_URL_REMOTE: https://gitlab.com
    REGISTRATION_TOKEN_REMOTE: ${GITLABCOM_GITLAB_TOKEN}
    CI_SERVER_URL_LOCAL: http://gitlab_gitlab-ce
    REGISTRATION_TOKEN_LOCAL: ${OAGDEV_GITLAB_TOKEN}
    RUNNER_NAME: OAG-dev
    RUNNER_TAG_LIST: oagdev
    CACHE_S3_SERVER_ADDRESS: minio.redmic.net
    CACHE_S3_ACCESS_KEY: ${MINIO_ACCESS_KEY}
    CACHE_S3_SECRET_KEY: ${MINIO_SECRET_KEY}
  script:
    - >
      deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE} CI_SERVER_URL="${CI_SERVER_URL_REMOTE}"
      REGISTRATION_TOKEN="${REGISTRATION_TOKEN_REMOTE}" RUNNER_NAME="${RUNNER_NAME}"
      RUNNER_TAG_LIST="${RUNNER_TAG_LIST}" CACHE_S3_SERVER_ADDRESS="${CACHE_S3_SERVER_ADDRESS}"
      CACHE_S3_ACCESS_KEY="${MINIO_ACCESS_KEY}" CACHE_S3_SECRET_KEY="${MINIO_SECRET_KEY}"
    - >
      deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE} CI_SERVER_URL="${CI_SERVER_URL_LOCAL}"
      REGISTRATION_TOKEN="${REGISTRATION_TOKEN_LOCAL}" RUNNER_NAME="${RUNNER_NAME}"
      RUNNER_TAG_LIST="${RUNNER_TAG_LIST}" CACHE_S3_SERVER_ADDRESS="${CACHE_S3_SERVER_ADDRESS}"
      CACHE_S3_ACCESS_KEY="${MINIO_ACCESS_KEY}" CACHE_S3_SECRET_KEY="${MINIO_SECRET_KEY}"
  environment:
    name: dev/gitlab-runner
  only:
    - dev
  when: manual

deploy-mail-server-dev:
  stage: deploy
  variables:
    SSH_REMOTE: ${DEV_SSH_REMOTE}
    COMPOSE_FILE: docker-compose.tmpl.yml:docker-compose.dev.yml
  script:
    - create-nets.sh mail-net
    - export DEPLOY_DIR_NAME=mail/mariadb STACK=mail SERVICES_TO_CHECK=mail_mail-mariadb IMAGE_TAG=10.2
    - >
      deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE} MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      MYSQL_PASSWORD=${DB_PASSWORD}
    - export DEPLOY_DIR_NAME=mail/redis STACK=mail SERVICES_TO_CHECK=mail_mail-redis IMAGE_TAG=4.0-alpine
    - deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE}
    - export DEPLOY_DIR_NAME=mail/mailserver STACK=mail SERVICES_TO_CHECK=mail_mail-mailserver IMAGE_TAG=1.1-latest
    - >
      deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE} RSPAMD_PASSWORD=${RSPAMD_PASSWORD}
      DBPASS=${DB_PASSWORD} PUBLIC_HOSTNAME=${DEV_PUBLIC_HOSTNAME}
  environment:
    name: dev/rspamd
    url: https://spam.${DEV_PUBLIC_HOSTNAME}
  only:
    - dev
  when: manual

deploy-mail-admin-dev:
  stage: deploy
  variables:
    DEPLOY_DIR_NAME: mail/postfixadmin
    SSH_REMOTE: ${DEV_SSH_REMOTE}
    STACK: mail
    SERVICES_TO_CHECK: mail_mail-postfixadmin
    IMAGE_TAG: latest
    COMPOSE_FILE: docker-compose.tmpl.yml:docker-compose.dev.yml
  script:
    - >
      deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE} DBPASS=${DB_PASSWORD}
      PUBLIC_HOSTNAME=${DEV_PUBLIC_HOSTNAME}
  environment:
    name: dev/postfixadmin
    url: https://postfixadmin.${DEV_PUBLIC_HOSTNAME}
  only:
    - dev
  when: manual

deploy-mail-client-dev:
  stage: deploy
  variables:
    DEPLOY_DIR_NAME: mail/rainloop
    SSH_REMOTE: ${DEV_SSH_REMOTE}
    STACK: mail
    SERVICES_TO_CHECK: mail_mail-rainloop
    IMAGE_TAG: latest
    COMPOSE_FILE: docker-compose.tmpl.yml:docker-compose.dev.yml
  script:
    - deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE} PUBLIC_HOSTNAME=${DEV_PUBLIC_HOSTNAME}
  environment:
    name: dev/rainloop
    url: https://webmail.${DEV_PUBLIC_HOSTNAME}
  only:
    - dev
  when: manual

deploy-minio-dev:
  stage: deploy
  variables:
    DEPLOY_DIR_NAME: minio
    SSH_REMOTE: ${DEV_SSH_REMOTE}
    STACK: minio
    SERVICES_TO_CHECK: minio_minio
    IMAGE_TAG: latest
    COMPOSE_FILE: docker-compose.tmpl.yml:docker-compose.dev.yml
  script:
    - >
      deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE} MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY=${MINIO_SECRET_KEY} PUBLIC_HOSTNAME=${DEV_PUBLIC_HOSTNAME}
  environment:
    name: dev/minio
    url: https://minio.${DEV_PUBLIC_HOSTNAME}
  only:
    - dev
  when: manual

deploy-pgadmin-dev:
  stage: deploy
  variables:
    DEPLOY_DIR_NAME: pgadmin
    SSH_REMOTE: ${DEV_SSH_REMOTE}
    STACK: postgres
    SERVICES_TO_CHECK: postgres_pgadmin
    IMAGE_TAG: latest
    COMPOSE_FILE: docker-compose.tmpl.yml:docker-compose.dev.yml
  script:
    - >
      deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE} PGADMIN_SETUP_EMAIL=${PGADMIN_SETUP_EMAIL}
      PGADMIN_SETUP_PASSWORD=${PGADMIN_SETUP_PASSWORD} MAIL_USER=${MAIL_USER} MAIL_PASSWORD=${MAIL_PASSWORD}
      PUBLIC_HOSTNAME=${DEV_PUBLIC_HOSTNAME}
  environment:
    name: dev/pgadmin
    url: https://pgadmin.${DEV_PUBLIC_HOSTNAME}
  only:
    - dev
  when: manual

deploy-portainer-dev:
  stage: deploy
  variables:
    DEPLOY_DIR_NAME: portainer
    SSH_REMOTE: ${DEV_SSH_REMOTE}
    STACK: portainer
    SERVICES_TO_CHECK: portainer_agent portainer_portainer
    IMAGE_TAG: latest
    COMPOSE_FILE: docker-compose.tmpl.yml:docker-compose.dev.yml
  script:
    - deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE} PUBLIC_HOSTNAME=${DEV_PUBLIC_HOSTNAME}
  environment:
    name: dev/portainer
    url: https://portainer.${DEV_PUBLIC_HOSTNAME}
  only:
    - dev
  when: manual

deploy-portainer-pro:
  stage: deploy
  variables:
    DEPLOY_DIR_NAME: portainer
    SSH_REMOTE: ${PRO_SSH_REMOTE}
    STACK: portainer
    SERVICES_TO_CHECK: portainer_agent portainer_portainer
    IMAGE_TAG: latest
    COMPOSE_FILE: docker-compose.tmpl.yml:docker-compose.prod.yml
  script:
    - deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE} PUBLIC_HOSTNAME=${PRO_PUBLIC_HOSTNAME}
  environment:
    name: pro/portainer
    url: https://portainer.${PRO_PUBLIC_HOSTNAME}
  only:
    - master
  when: manual

deploy-traefik-dev:
  stage: deploy
  variables:
    DEPLOY_DIR_NAME: traefik
    SSH_REMOTE: ${DEV_SSH_REMOTE}
    STACK: traefik
    SERVICES_TO_CHECK: traefik_traefik
    IMAGE_TAG: latest
    COMPOSE_FILE: docker-compose.tmpl.yml:docker-compose.dev.yml
    PUBLIC_HOSTNAME: ${DEV_PUBLIC_HOSTNAME}
    UI_AUTH: ${DEV_UI_AUTH}
  script:
    - >
      deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE} PUBLIC_HOSTNAME=${PUBLIC_HOSTNAME}
      UI_AUTH=${UI_AUTH}
  environment:
    name: dev/traefik
    url: https://traefik.${DEV_PUBLIC_HOSTNAME}
  only:
    - dev
  when: manual

deploy-traefik-pro:
  stage: deploy
  variables:
    DEPLOY_DIR_NAME: traefik
    SSH_REMOTE: ${PRO_SSH_REMOTE}
    STACK: traefik
    SERVICES_TO_CHECK: traefik_traefik
    IMAGE_TAG: latest
    COMPOSE_FILE: docker-compose.tmpl.yml:docker-compose.prod.yml
    PUBLIC_HOSTNAME: ${PRO_PUBLIC_HOSTNAME}
    UI_AUTH: ${PRO_UI_AUTH}
  script:
    - >
      deploy.sh IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE} PUBLIC_HOSTNAME=${PUBLIC_HOSTNAME}
      UI_AUTH=${UI_AUTH}
  environment:
    name: pro/traefik
    url: https://traefik.${PRO_PUBLIC_HOSTNAME}
  only:
    - master
  when: manual
